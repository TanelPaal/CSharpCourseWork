@page "{gameId}"
@using GameBrain
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApp.Pages.Game.Play

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Play Game</title>
    <style>
        .action-button {
            background-color: #4CAF50; /* Green background */
        border: none; /* Remove borders */
            color: white; /* White text */
        padding: 15px 32px; /* Some padding */
        text-align: center; /* Centered text */
            text-decoration: none; /* Remove underline */
            display: inline-block; /* Make the buttons appear side by side */
            font-size: 16px; /* Increase font size */
            margin: 4px 2px; /* Some margin */
            cursor: pointer; /* Pointer/hand icon */
            border-radius: 12px; /* Rounded corners */
            transition-duration: 0.4s; /* Transition effect */
        }
        .action-button:hover {
            background-color: white; /* White background on hover */
            color: black; /* Black text on hover */
            border: 2px solid #4CAF50; /* Green border on hover */
        }
        .board {
            display: grid;
            grid-template-columns: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
            grid-template-rows: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
        }
        .cell {
            width: 50px;
            height: 50px;
            border: 1px solid #000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }
        .empty {
            background-color: rgba(0, 0, 0, 0.1); /* Translucent background for empty cells */
            color: transparent; /* Make text invisible for empty cells */
        }
        .movable-grid {
            background-color: rgba(0, 255, 0, 0.3); /* Light green background for movable grid cells */
    }
    </style>
</head>
<h1>Play Game</h1>
<label id="gameId"> Game ID: @Model.GameId</label><br />
<div id="userSide">
    <h2>Your Pieces: </h2>
</div>
<div id="turnInfo">
    <h2>Current Turn: </h2>
</div>
<div id="username"></div>

<form method="post" id="actionForm">
    <input type="hidden" name="x" id="x" />
    <input type="hidden" name="y" id="y" />
    <input type="hidden" name="oldX" id="oldX" />
    <input type="hidden" name="oldY" id="oldY" />
    <input type="hidden" name="action" id="action" />
    <input type="hidden" name="gameId" id="gameId" value="@Model.GameId" />


    <button type="button" class="action-button" onclick="promptCoordinates('place')">Place Piece</button>
    <button type="button" class="action-button" onclick="promptCoordinates('moveGrid')">Move Playable Grid</button>
    <button type="button" class="action-button" onclick="movePiece('movePiece')">Move Piece</button>
    
</form>

<a type="submit" class="action-button back-button" asp-page="/Dashboard">Return to Menu</a>

<div class="board">
    @for (int y = 0; y < (Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3); y++)
    {
        for (int x = 0; x < (Model.GameState?.GameConfiguration?.BoardSizeWidth ?? 3); x++)
        {
            var cellClass = "cell";
            if (Model.GameState?.GameBoard[x][y] == EGamePiece.Empty)
            {
                cellClass += " empty";
            }
            if (Model.IsMovableGrid(x, y))
            {
                cellClass += " movable-grid";
            }
            <div class="@cellClass">
                @Model.GameState?.GameBoard[x][y]
            </div>
        }
    }
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>



    
    function getQueryParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
    const gameId = @Model.GameId
    var username = getQueryParameter('username');
    var gameSession

    const div = document.querySelector('a.back-button')
    div.href = `/Dashboard?username=${encodeURIComponent(username)}`;


    const connection = new signalR.HubConnectionBuilder()
        .withUrl(`/gameHub?gameId=${gameId}&username=${encodeURIComponent(username)}`)
        .withAutomaticReconnect() // Automatically reconnect on disconnections
        .build();




    connection.start()
        .then(() => {
            console.log("SignalR connection started");
        })
        .catch(err => console.error("Error starting connection:", err));

    connection.on("ReceiveGameSessionData", (gameSessions) => {
        console.log("Received game sessions:", gameSessions);
        
        if (gameSessions && gameSessions[gameId] && gameSessions[gameId][username]) {
            clearInterval(connection.checkIntervalId);
            gameSession = gameSessions[gameId][username];

            console.log("Game session found:", gameSession);
            const isUserTurn = "@Model!.GameState!._nextMoveBy" == gameSession.piece;
            document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${gameSession.piece}!</h2>`;
            var nextMoveBy = "@Model!.GameState!._nextMoveBy"
            console.log(nextMoveBy)
            document.getElementById("turnInfo").innerHTML = `<h2>Current Turn: ${nextMoveBy.toString()}</h2>`;
            console.log(!isUserTurn)
            const buttons = document.querySelectorAll("button[type='button']");
            buttons.forEach(function (button) {
                button.disabled = !isUserTurn;
            });
        } else {
            console.log("Game session not found in received data");
        }
    });

    // Add connection state logging
    connection.onclose(error => {
        console.error("Connection closed with error:", error);
    });

    connection.onreconnecting(error => {
        console.warn("Connection reconnecting:", error);
    });

    connection.onreconnected(connectionId => {
        console.log("Connection reconnected. ConnectionId:", connectionId);
    });

    if (gameSession != null && gameSession.piece != null) {
        console.log(gameSession)
        console.log("logging gamesession");
        const isUserTurn = "@Model!.GameState!._nextMoveBy" == gameSession.piece;
        document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${gameSession.piece}!</h2>`;
        console.log(nextMoveBy)

        const buttons = document.querySelectorAll("button[type='button']");
        console.log(!isUserTurn)
        buttons.forEach(function (button) {
            button.disabled = !isUserTurn;
        });
    }
    
    function promptCoordinates(action) {
        var coords = prompt("Enter coordinates (x,y):");
        if (coords) {
            var [x, y] = coords.split(',').map(Number);
            document.getElementById('x').value = x;
            document.getElementById('y').value = y;
            setAction(action);
        }
    }
    function movePiece() {
        var oldCoords = prompt("Enter old coordinates (x,y):");
        var newCoords = prompt("Enter new coordinates (x,y):");
        if (oldCoords && newCoords) {
            var [oldX, oldY] = oldCoords.split(',').map(Number);
            var [newX, newY] = newCoords.split(',').map(Number);
            document.getElementById('oldX').value = oldX;
            document.getElementById('oldY').value = oldY;
            document.getElementById('x').value = newX;
            document.getElementById('y').value = newY;
            setAction('movePiece');
        }
    }
    function setAction(action, gameId) {
        document.getElementById('action').value = action;
        document.getElementById('actionForm').submit();
    }
    
    const form = document.getElementById('actionForm');
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const formData = new FormData(form);
        const response = await fetch(window.location.href, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        });
        
        if (response.ok) {
            // Let SignalR handle the update instead of reloading
            console.log("Move successful");
        } else {
            console.error("Error making move");
        }

        form.reset();
    });


    //const username = sessionStorage.getItem('username')
    document.getElementById("username").innerHTML = `<h2>Username: ${username}</h2>`;


    connection.on("Error", function (message) {
        alert(message);
    });


    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }
    
    connection.on("ReceiveGameStateUpdate", async function (gameState) {
        console.log("refreshing page")
        try {
            // Fetch the latest game state
            const response = await fetch(window.location.href);
            const html = await response.text();
            
            // Create a temporary container
            const tempContainer = document.createElement('div');
            tempContainer.innerHTML = html;
            
            // Update the game board
            const newBoard = tempContainer.querySelector('.board');
            const currentBoard = document.querySelector('.board');
            if (newBoard && currentBoard) {
                currentBoard.innerHTML = newBoard.innerHTML;
            }
            
            // Update turn information
            const newTurnInfo = tempContainer.querySelector('h2');
            const currentTurnInfo = document.querySelector('h2');
            if (newTurnInfo && currentTurnInfo) {
                currentTurnInfo.textContent = newTurnInfo.textContent;
            }
            
            
            // Update button states based on whose turn it is
            if (gameSession && gameSession.piece) {
                const isUserTurn = convertToXO(gameState._nextMoveBy) === gameSession.piece;
                document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${gameSession.piece}</h2>`;
                console.log(convertToXO(gameState._nextMoveBy))
                document.getElementById("turnInfo").innerHTML = `<h2>Current Turn: ${convertToXO(gameState._nextMoveBy)}</h2>`;
            
                const buttons = document.querySelectorAll("button[type='button']");
                
                console.log(!isUserTurn)
                buttons.forEach(function (button) {
                    button.disabled = !isUserTurn;
                });
            }
        } catch (error) {
            console.error("Error updating game state:", error);
        }
    });
    // Helper function to convert enum values to X/O
    function convertToXO(value) {
        switch (value) {
            case 1:
                return "X";
            case 2:
                return "O";
            default:
                return "";
        }
    }

</script>
</html>