@page "{gameId}"
@using GameBrain
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApp.Pages.Game.Play

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Play Game</title>
    <style>
        .action-button {
            background-color: #4CAF50; /* Green background */
        border: none; /* Remove borders */
            color: white; /* White text */
        padding: 15px 32px; /* Some padding */
        text-align: center; /* Centered text */
            text-decoration: none; /* Remove underline */
            display: inline-block; /* Make the buttons appear side by side */
            font-size: 16px; /* Increase font size */
            margin: 4px 2px; /* Some margin */
            cursor: pointer; /* Pointer/hand icon */
            border-radius: 12px; /* Rounded corners */
            transition-duration: 0.4s; /* Transition effect */
        }
        .action-button:hover {
            background-color: white; /* White background on hover */
            color: black; /* Black text on hover */
            border: 2px solid #4CAF50; /* Green border on hover */
        }
        .board {
            display: grid;
            grid-template-columns: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
            grid-template-rows: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
        }
        .cell {
            width: 50px;
            height: 50px;
            border: 1px solid #000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }
        .empty {
            background-color: rgba(0, 0, 0, 0.1); /* Translucent background for empty cells */
            color: transparent; /* Make text invisible for empty cells */
        }
        .movable-grid {
            background-color: rgba(0, 255, 0, 0.3); /* Light green background for movable grid cells */
    }
    </style>
</head>
<h1>Play Game</h1>
<label id="gameId"> Game ID: @Model.GameId</label><br />
<div id="userSide"></div>
<div id="username"></div>
<h2>@Model.GameState?._nextMoveBy's turn</h2>

<form method="post" id="actionForm" onsubmit="leaveGame()">
    <input type="hidden" name="x" id="x" />
    <input type="hidden" name="y" id="y" />
    <input type="hidden" name="oldX" id="oldX" />
    <input type="hidden" name="oldY" id="oldY" />
    <input type="hidden" name="action" id="action" />
    <input type="hidden" name="gameId" id="gameId" value="@Model.GameId" />


    <button type="button" class="action-button" onclick="promptCoordinates('place')">Place Piece</button>
    <button type="button" class="action-button" onclick="promptCoordinates('moveGrid')">Move Playable Grid</button>
    <button type="button" class="action-button" onclick="movePiece('movePiece')">Move Piece</button>
    <button type="submit" class="action-button" formaction="/Dashboard">Return to Menu</button>
</form>

<div class="board">
    @for (int y = 0; y < (Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3); y++)
    {
        for (int x = 0; x < (Model.GameState?.GameConfiguration?.BoardSizeWidth ?? 3); x++)
        {
            var cellClass = "cell";
            if (Model.GameState?.GameBoard[x][y] == EGamePiece.Empty)
            {
                cellClass += " empty";
            }
            if (Model.IsMovableGrid(x, y))
            {
                cellClass += " movable-grid";
            }
            <div class="@cellClass">
                @Model.GameState?.GameBoard[x][y]
            </div>
        }
    }
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>

<script>
    
    function getQueryParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
    var storedPiece
    // Get the username from the URL query parameters
    var username = getQueryParameter('username');

    if (storedPiece) {
        document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${storedPiece}!</h2>`;
    }   
    
    
    function promptCoordinates(action) {
        var coords = prompt("Enter coordinates (x,y):");
        if (coords) {
            var [x, y] = coords.split(',').map(Number);
            document.getElementById('x').value = x;
            document.getElementById('y').value = y;
            setAction(action);
        }
    }
    function movePiece() {
        var oldCoords = prompt("Enter old coordinates (x,y):");
        var newCoords = prompt("Enter new coordinates (x,y):");
        if (oldCoords && newCoords) {
            var [oldX, oldY] = oldCoords.split(',').map(Number);
            var [newX, newY] = newCoords.split(',').map(Number);
            document.getElementById('oldX').value = oldX;
            document.getElementById('oldY').value = oldY;
            document.getElementById('x').value = newX;
            document.getElementById('y').value = newY;
            setAction('movePiece');
        }
    }
    function setAction(action, gameId) {
        document.getElementById('action').value = action;
        document.getElementById('actionForm').submit();
    }
    function leaveGame() {
        const gameId = "@Model.GameId";
        const username = sessionStorage.getItem('username');
        const joinedGames = JSON.parse(sessionStorage.getItem("joinedGames") || "{}");

        if (joinedGames[gameId]) {
            connection.invoke("LeaveGame", gameId, username).then(() => {
                delete joinedGames[gameId];
                sessionStorage.setItem("joinedGames", JSON.stringify(joinedGames));
                sessionStorage.setItem('userSide', null);
            }).catch(function (err) {
                console.error(err.toString());
            });
        }
    }
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gameHub")
        .build();


    //const username = sessionStorage.getItem('username')
    document.getElementById("username").innerHTML = `<h2>Username: ${username}!</h2>`;


    connection.on("Error", function (message) {
        alert(message);
    });


    connection.start().then(function () {
        const gameId = "@Model.GameId";
        const storedUser = JSON.parse(localStorage.getItem('user'));
        //const username = storedUser.username
        const joinedGames = JSON.parse(sessionStorage.getItem("joinedGames") || "{}");

        if (performance.navigation.type !== performance.navigation.TYPE_RELOAD && !joinedGames[gameId]) {
            connection.invoke("JoinGame", gameId, username).then(() => {
                joinedGames[gameId] = true;
                console.log("joined the game and likely added to grou")

                sessionStorage.setItem("joinedGames", JSON.stringify(joinedGames));
                const user = {name: username, piece: "x", joinedGames: joinedGames};
                localStorage.setItem('user', JSON.stringify(user));
            }).catch(function (err) {
                return console.error(err.toString());
            });
        }
                   
        @*// Tomorrow's clue        
        const gameSessions = @Html.Raw(Json.Serialize(Model._gameService._gameSessions));
        console.log(gameSessions);
        $1$//var players = @Model._gameService._gameSessions[Model.GameId]#1#
        console.log(players)*@

        var player = players[username]
        storedPiece = player.Piece
        console.log("@Model!.GameState!._nextMoveBy")
    });


    connection.on("ReceiveGameStateUpdate", function () {
        // Refresh the page when a game state update is received
        console.log("requested refresh");
        //alert("This is second refresh")
        location.reload();
        @*setTimeout(function () {
            location.reload(); // Refresh the page after 3 seconds
        }, 3000);*@
    });

    connection.on("ReceiveAssignedPiece", function (piece) {
        const storedUser = JSON.parse(localStorage.getItem('user'));
        localStorage.setItem('user', JSON.stringify(user));
        sessionStorage.setItem('userSide', piece);
        console.log("You have been assigned the " + piece + " pieces.");
        //alert("you have been assigned "+ piece)
        sessionStorage.setItem('userSide', piece);

        console.log(sessionStorage.getItem('userSide'))
        const isUserTurn = "@Model!.GameState!._nextMoveBy" == sessionStorage.getItem('userSide');
        const buttons = document.querySelectorAll("button[type='button']");

        buttons.forEach(function (button) {
            button.disabled = !isUserTurn;
        });
    });

    window.onbeforeunload = function () {
        const gameId = "@Model.GameId";
        //const username = sessionStorage.getItem('username');
        const joinedGames = JSON.parse(sessionStorage.getItem("joinedGames") || "{}");
        //&& joinedGames[gameId]
        if (performance.navigation.type !== performance.navigation.TYPE_RELOAD && joinedGames[gameId] ) {
            connection.invoke("LeaveGame", gameId, username).then(() => {
                delete joinedGames[gameId];
                sessionStorage.setItem("joinedGames", JSON.stringify(joinedGames));
                sessionStorage.setItem('userSide', null);
            }).catch(function (err) {
                return console.error(err.toString());
            });
        }
    };

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    };
</script>
</html>