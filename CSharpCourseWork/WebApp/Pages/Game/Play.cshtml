@page "{gameId}"
@using GameBrain
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApp.Pages.Game.Play

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Play Game</title>
    <style>
    .action-button {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
        transition-duration: 0.4s;
    }
    .action-button:hover {
        background-color: white;
        color: #4CAF50;
        border: 2px solid #4CAF50;
    }
    .action-button:disabled {
        background-color: #a2e3a4;
        cursor: not-allowed;
        opacity: 0.6;
    }
    .board-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin: 20px;
    }
    .board-with-row-indices {
        display: flex;
        flex-direction: row;
    }
    .indices {
        display: flex;
    }
    .column-indices {
        margin-left: 60px;
        flex-direction: row;
        display: grid;
        grid-template-columns: 50px repeat(@(Model.GameState?.GameConfiguration?.BoardSizeWidth ?? 3), 50px);
    }
    .row-indices {
        flex-direction: column;
        margin-right: 10px;
    }
    .index-cell {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #666;
    }
    .board {
        display: grid;
        grid-template-columns: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
        grid-template-rows: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
    }
    .cell {
        width: 50px;
        height: 50px;
        border: 1px solid #000;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
    }
    .empty {
        background-color: rgba(0, 0, 0, 0.1);
        color: transparent;
    }
    .movable-grid {
        background-color: rgba(0, 255, 0, 0.3);
    }
    .ai-button {
        background-color: #6f42c1;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
        transition-duration: 0.4s;
    }
    .ai-button:hover {
        background-color: white;
        color: #6f42c1;
        border: 2px solid #6f42c1;
    }
    .ai-button:disabled {
        background-color: #b8a2e3;
        cursor: not-allowed;
        opacity: 0.6;
    }
    .return-button {
        background-color: #FF5733; /* Different color background */
        border: none; /* Remove borders */
        color: white; /* White text */
        padding: 15px 32px; /* Some padding */
        text-align: center; /* Centered text */
        text-decoration: none; /* Remove underline */
        display: inline-block; /* Make the buttons appear side by side */
        font-size: 16px; /* Increase font size */
        margin: 4px 2px; /* Some margin */
        cursor: pointer; /* Pointer/hand icon */
        border-radius: 12px; /* Rounded corners */
        transition-duration: 0.4s; /* Transition effect */
    }
    .return-button:hover {
        background-color: white; /* White background on hover */
        color: black; /* Black text on hover */
        border: 2px solid #FF5733; /* Different color border on hover */
    }

    </style>
</head>
<h1>Play Game</h1>
<label id="gameId"> Game ID: @Model.GameId</label><br />
<div id="userSide">
    <h2>Your Pieces: </h2>
</div>
<div id="turnInfo">
    <h2>Current Turn: </h2>
</div>
<div id="username"></div>

<form method="post" id="actionForm">
    <input type="hidden" name="x" id="x" />
    <input type="hidden" name="y" id="y" />
    <input type="hidden" name="oldX" id="oldX" />
    <input type="hidden" name="oldY" id="oldY" />
    <input type="hidden" name="action" id="action" />
    <input type="hidden" name="gameId" id="gameId" value="@Model.GameId" />
    
    <button type="button" class="action-button" onclick="promptCoordinates('place')">Place Piece</button>
    <button type="button" class="action-button" onclick="promptCoordinates('moveGrid')">Move Playable Grid</button>
    <button type="button" class="action-button" onclick="movePiece('movePiece')">Move Piece</button>
    <button type="button" class="ai-button" onclick="makeRandomMove()">AI Random Move</button>
    <button type="button" class="ai-button" onclick="makeOpponentAIMove()">AI Move for Opponent</button>
</form>

<a type="submit" class="action-button return-button" asp-page="/Dashboard">Return to Menu</a>

<div class="board-container">
    <!-- Column indices -->
    <div class="indices column-indices">
        @for (int x = 0; x < (Model.GameState?.GameConfiguration?.BoardSizeWidth ?? 3); x++)
        {
            <div class="index-cell">@x</div>
        }
    </div>

    <div class="board-with-row-indices">
        <!-- Row indices -->
        <div class="indices row-indices">
            @for (int y = 0; y < (Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3); y++)
            {
                <div class="index-cell">@y</div>
            }
        </div>

        <!-- Game board -->
        <div class="board">
            @for (int y = 0; y < (Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3); y++)
            {
                for (int x = 0; x < (Model.GameState?.GameConfiguration?.BoardSizeWidth ?? 3); x++)
                {
                    var cellClass = "cell";
                    if (Model.GameState?.GameBoard[x][y] == EGamePiece.Empty)
                    {
                        cellClass += " empty";
                    }
                    if (Model.IsMovableGrid(x, y))
                    {
                        cellClass += " movable-grid";
                    }
                    <div class="@cellClass">
                        @Model.GameState?.GameBoard[x][y]
                    </div>
                }
            }
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    function getQueryParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
    const gameId = @Model.GameId
    var username = getQueryParameter('username');
    var gameSession

    const div = document.querySelector('a.return-button')
    div.href = `/Dashboard?username=${encodeURIComponent(username)}`;
    
    function makeRandomMove() {
        document.getElementById('action').value = 'randomMove';
        document.getElementById('actionForm').submit();
    }
    
    function makeOpponentAIMove() {
        document.getElementById('action').value = 'opponentAIMove';
        document.getElementById('actionForm').submit();
    }


    const connection = new signalR.HubConnectionBuilder()
        .withUrl(`/gameHub?gameId=${gameId}&username=${encodeURIComponent(username)}`)
        .withAutomaticReconnect() // Automatically reconnect on disconnections
        .build();

    connection.start()
        .then(() => {
            console.log("SignalR connection started");
        })
        .catch(err => console.error("Error starting connection:", err));

    connection.on("ReceiveGameSessionData", (gameSessions) => {
        console.log("Received game sessions:", gameSessions);
        
        if (gameSessions && gameSessions[gameId] && gameSessions[gameId][username]) {
            clearInterval(connection.checkIntervalId);
            gameSession = gameSessions[gameId][username];

            console.log("Game session found:", gameSession);
            const isUserTurn = "@Model!.GameState!._nextMoveBy" == gameSession.piece;
            document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${gameSession.piece}</h2>`;
            var nextMoveBy = "@Model!.GameState!._nextMoveBy"
            console.log(nextMoveBy)
            document.getElementById("turnInfo").innerHTML = `<h2>Current Turn: ${nextMoveBy.toString()}</h2>`;
            console.log(!isUserTurn)
            const buttons = document.querySelectorAll("button[type='button']:not([onclick*='makeOpponentAIMove'])");
            console.log(!isUserTurn)
            buttons.forEach(function (button) {
                button.disabled = !isUserTurn;
            });
        } else {
            console.log("Game session not found in received data");
        }
    });

    // Add connection state logging
    connection.onclose(error => {
        console.error("Connection closed with error:", error);
    });

    connection.onreconnecting(error => {
        console.warn("Connection reconnecting:", error);
    });

    connection.onreconnected(connectionId => {
        console.log("Connection reconnected. ConnectionId:", connectionId);
    });

    if (gameSession != null && gameSession.piece != null) {
        console.log(gameSession)
        console.log("logging gamesession");
        const isUserTurn = "@Model!.GameState!._nextMoveBy" == gameSession.piece;
        document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${gameSession.piece}</h2>`;
        console.log(nextMoveBy)

        const buttons = document.querySelectorAll("button[type='button']:not([onclick*='makeOpponentAIMove'])");
        console.log(!isUserTurn)
        buttons.forEach(function (button) {
            button.disabled = !isUserTurn;
        });
    }
    
    function promptCoordinates(action) {
        var coords = prompt("Enter coordinates (x,y):");
        if (coords) {
            var [x, y] = coords.split(',').map(Number);
            document.getElementById('x').value = x;
            document.getElementById('y').value = y;
            setAction(action);
        }
    }
    function movePiece() {
        var oldCoords = prompt("Enter old coordinates (x,y):");
        var newCoords = prompt("Enter new coordinates (x,y):");
        if (oldCoords && newCoords) {
            var [oldX, oldY] = oldCoords.split(',').map(Number);
            var [newX, newY] = newCoords.split(',').map(Number);
            document.getElementById('oldX').value = oldX;
            document.getElementById('oldY').value = oldY;
            document.getElementById('x').value = newX;
            document.getElementById('y').value = newY;
            setAction('movePiece');
        }
    }
    function setAction(action, gameId) {
        document.getElementById('action').value = action;
        document.getElementById('actionForm').submit();
    }
    
    const form = document.getElementById('actionForm');
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const formData = new FormData(form);
        const response = await fetch(window.location.href, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        });
        
        if (response.ok) {
            // Let SignalR handle the update instead of reloading
            console.log("Move successful");
        } else {
            console.error("Error making move");
        }

        form.reset();
    });

    //const username = sessionStorage.getItem('username')
    document.getElementById("username").innerHTML = `<h2>Username: ${username}</h2>`;

    connection.on("Error", function (message) {
        alert(message);
    });

    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }
    
    connection.on("ReceiveGameStateUpdate", async function (gameState) {
        console.log("refreshing page")
        try {
            // Fetch the latest game state
            const response = await fetch(window.location.href);
            const html = await response.text();
            
            // Create a temporary container
            const tempContainer = document.createElement('div');
            tempContainer.innerHTML = html;
            
            // Update the game board
            const newBoard = tempContainer.querySelector('.board');
            const currentBoard = document.querySelector('.board');
            if (newBoard && currentBoard) {
                currentBoard.innerHTML = newBoard.innerHTML;
            }
            
            // Update turn information
            const newTurnInfo = tempContainer.querySelector('h2');
            const currentTurnInfo = document.querySelector('h2');
            if (newTurnInfo && currentTurnInfo) {
                currentTurnInfo.textContent = newTurnInfo.textContent;
            }
            
            // Update button states based on whose turn it is
            if (gameSession && gameSession.piece) {
                const isUserTurn = convertToXO(gameState._nextMoveBy) === gameSession.piece;
                document.getElementById("userSide").innerHTML = `<h2>Your Pieces: ${gameSession.piece}</h2>`;
                console.log(convertToXO(gameState._nextMoveBy))
                document.getElementById("turnInfo").innerHTML = `<h2>Current Turn: ${convertToXO(gameState._nextMoveBy)}</h2>`;
            
                const buttons = document.querySelectorAll("button[type='button']:not([onclick*='makeOpponentAIMove'])");
                console.log(!isUserTurn)
                buttons.forEach(function (button) {
                    button.disabled = !isUserTurn;
                });
            }
            // Check for win or tie condition
            if (gameState.CheckWinCondition || gameState.IsBoardFull) {
                // Both players should be redirected to the game over page
                console.log("Game over");
                window.location.href = `/Game/GameOver/${gameId}?username=${encodeURIComponent(username)}`;
            }
        } catch (error) {
            console.error("Error updating game state:", error);
        }
    });
    
    connection.on("GameOver", function() {
        window.location.href = `/Game/GameOver/${gameId}?username=${encodeURIComponent(username)}`;
    });
    
    // Helper function to convert enum values to X/O
    function convertToXO(value) {
        switch (value) {
            case 1:
                return "X";
            case 2:
                return "O";
            default:
                return "";
        }
    }

</script>
</html>