@page "{gameId}"
@using GameBrain
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApp.Pages.Game.Play

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Play Game</title>
    <style>
        .board {
            display: grid;
            grid-template-columns: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
            grid-template-rows: repeat(@(Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3), 50px);
        }
        .cell {
            width: 50px;
            height: 50px;
            border: 1px solid #000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }
        .empty {
            background-color: rgba(0, 0, 0, 0.1); /* Translucent background for empty cells */
            color: transparent; /* Make text invisible for empty cells */
        }
        .movable-grid {
            background-color: rgba(0, 255, 0, 0.3); /* Light green background for movable grid cells */
    }
    </style>
</head>
<body>
<h1>Play Game</h1>

<h2>@Model.GameState?._nextMoveBy's turn</h2>

<div class="board">
    @for (int y = 0; y < (Model.GameState?.GameConfiguration?.BoardSizeHeight ?? 3); y++)
    {
        for (int x = 0; x < (Model.GameState?.GameConfiguration?.BoardSizeWidth ?? 3); x++)
        {
            var cellClass = "cell";
            if (Model.GameState?.GameBoard[x][y] == EGamePiece.Empty)
            {
                cellClass += " empty";
            }
            if (Model.IsMovableGrid(x, y))
            {
                cellClass += " movable-grid";
            }
            <div class="@cellClass" onclick="makeMove(@x, @y)">
                @Model.GameState?.GameBoard[x][y]
            </div>
        }
    }
</div>

<form method="post" id="actionForm">
    <input type="hidden" name="x" id="x" />
    <input type="hidden" name="y" id="y" />
    <input type="hidden" name="oldX" id="oldX" />
    <input type="hidden" name="oldY" id="oldY" />
    <input type="hidden" name="action" id="action" />
    <input type="hidden" name="gameId" id="gameId" value="@Model.GameId" />


    <button type="button" onclick="promptCoordinates('place')">Place Piece</button>
    <button type="button" onclick="promptCoordinates('moveGrid')">Move Playable Grid</button>
    <button type="button" onclick="movePiece('movePiece')">Move Piece</button>
    <button type="submit" formaction="/Dashboard">Return to Menu</button>
</form>

<script>
    function promptCoordinates(action) {
        var coords = prompt("Enter coordinates (x,y):");
        if (coords) {
            var [x, y] = coords.split(',').map(Number);
            document.getElementById('x').value = x;
            document.getElementById('y').value = y;
            setAction(action);
        }
    }
    
    function movePiece() {
        var oldCoords = prompt("Enter old coordinates (x,y):");
        var newCoords = prompt("Enter new coordinates (x,y):");
        if (oldCoords && newCoords) {
            var [oldX, oldY] = oldCoords.split(',').map(Number);
            var [newX, newY] = newCoords.split(',').map(Number);
            document.getElementById('oldX').value = oldX;
            document.getElementById('oldY').value = oldY;
            document.getElementById('x').value = newX;
            document.getElementById('y').value = newY;
            setAction('movePiece');
        }
    }
    function setAction(action, gameId) {
        document.getElementById('action').value = action;
        document.getElementById('actionForm').submit();
    }
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gameHub")
        .build();

    connection.on("UpdateTurn", function (currentTurn) {
        const username = getCookie("Username");
        const isUserTurn = currentTurn === username;
        const buttons = document.querySelectorAll(".action-button");

        buttons.forEach(function (button) {
            button.disabled = !isUserTurn;
        });
    });

    connection.on("Error", function (message) {
        alert(message);
    });

    connection.on("ReceiveGameStateUpdate", function () {
        // Refresh the page when a game state update is received
        location.reload();
    });

    connection.start().then(function () {

        connection.invoke("JoinGame", "@Model.GameId", "@Model.Username").catch(function (err) {
            return console.error(err.toString());
        });
       
    });

    window.onbeforeunload = function () {

        connection.invoke("LeaveGame", "@Model.GameId", "@Model.Username").catch(function (err) {
            return console.error(err.toString());
        });

    };

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }
</script>
</body>
</html>