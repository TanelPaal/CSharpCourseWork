@page
@model WebApp.Pages.Game.Create

@{
    Layout = null;
}

<div class="dashboard-container">
    <h1 class="menu-title">Create a new game</h1>

    <form method="post" class="game-form">
        <div class="config-container">
            <h2>Select Configuration</h2>
            <div class="item-list">
                @foreach (var item in Model.Configurations)
                {
                    <button type="button" class="item @(Model.SelectedConfiguration == item.Name ? "selected" : "")"
                            onclick="selectConfiguration(this, '@item.Name')">
                        <p>Grid @item.BoardSizeHeight x @item.BoardSizeWidth,<br /> Move Playable Grid After @item.MovePieceAfterNMoves</p>
                    </button>
                }
            </div>
        </div>
        <input type="hidden" id="selectedConfiguration" name="SelectedConfiguration" value="@Model.SelectedConfiguration" />
        
        <div class="form-group">
            <label for="gameName">Game Name:</label>
            <input type="text" id="gameName" asp-for="GameName" class="input-field"/>
        </div>
        
        <div class="button-container">
            <button type="submit" class="action-button">Create Game</button>
            <a id="returnButton" class="action-button return-button" href="/Dashboard">Return to Menu</a>

        </div>
    </form>

    @if (!ModelState.IsValid)
    {
        <div class="validation-summary-errors">
            @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
            {
                <div class="error-message">@error.ErrorMessage</div>
            }
        </div>
    }
</div>

<script>
    function selectConfiguration(button, item) {
        document.getElementById('selectedConfiguration').value = item;
        document.querySelectorAll('.item').forEach(el => el.classList.remove('selected'));
        button.classList.add('selected');
    }
    
    function getQueryParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
    
    // Get username from URL and update return button href
    const username = getQueryParameter('username');
    document.getElementById("returnButton").href = `/Dashboard?username=${encodeURIComponent(username)}`;
</script>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
        background-color: #f5f5f5;
    }

    .dashboard-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .menu-title {
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        font-size: 2.5rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }

    .game-form {
        background-color: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .config-container {
        margin-bottom: 30px;
    }

    .item-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 300px;
        overflow-y: auto;
    }

    .item {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 15px;
        text-align: left;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    .item:hover {
        background-color: white;
        color: black;
        border: 2px solid #4CAF50;
    }

    .selected {
        background-color: #45a049;
        border: 2px solid #2d682f;
        color: white;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .input-field {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 16px;
    }

    .button-container {
        display: flex;
        gap: 10px;
        justify-content: space-between;
        margin-top: 30px;
    }

    .action-button {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    .action-button:hover {
        background-color: white;
        color: black;
        border: 2px solid #4CAF50;
    }

    .return-button {
        background-color: #FF5733;
    }

    .return-button:hover {
        border-color: #FF5733;
    }

    .error-message {
        color: #dc3545;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        padding: 10px;
        margin-top: 20px;
        border-radius: 6px;
    }

    .validation-summary-errors {
        margin-top: 20px;
    }
</style>